import{_ as i,c as a,o as t,a0 as n}from"./chunks/framework.zS86-xgI.js";const l="/note-operator/other/version/github/github-01.jpg",h="/note-operator/other/version/github/github-02.jpg",p="/note-operator/other/version/github/github-03.jpg",e="/note-operator/other/version/github/github-04.jpg",r="/note-operator/other/version/github/github-05.jpg",k="/note-operator/other/version/github/github-06.jpg",o="/note-operator/other/version/github/github-07.jpg",g="/note-operator/other/version/github/github-08.jpg",d="/note-operator/other/version/github/github-09.jpg",c="/note-operator/other/version/github/github-10.jpg",F="/note-operator/other/version/github/github-11.jpg",y="/note-operator/other/version/github/github-12.jpg",u="/note-operator/other/version/github/github-13.jpg",b="/note-operator/other/version/github/github-14.jpg",m="/note-operator/other/version/github/github-15.jpg",E="/note-operator/other/version/github/github-16.jpg",C="/note-operator/other/version/github/github-17.jpg",_="/note-operator/other/version/github/github-18.jpg",B="/note-operator/other/version/github/github-39.jpg",A="/note-operator/other/version/github/github-40.jpg",D="/note-operator/other/version/github/github-41.jpg",f="/note-operator/other/version/github/github-42.jpg",v="/note-operator/other/version/github/github-19.jpg",x="/note-operator/other/version/github/github-20.jpg",q="/note-operator/other/version/github/github-21.jpg",j="/note-operator/other/version/github/github-22.jpg",G="/note-operator/other/version/github/github-23.jpg",P="/note-operator/other/version/github/github-24.jpg",H="/note-operator/other/version/github/github-25.jpg",S="/note-operator/other/version/github/github-26.jpg",T="/note-operator/other/version/github/github-27.jpg",w="/note-operator/other/version/github/github-28.jpg",I="/note-operator/other/version/github/github-29.jpg",$="/note-operator/other/version/github/github-30.jpg",N="/note-operator/other/version/github/github-31.jpg",R="/note-operator/other/version/github/github-32.jpg",V="/note-operator/other/version/github/github-33.jpg",L="/note-operator/other/version/github/github-34.jpg",U="/note-operator/other/version/github/github-35.jpg",Y=JSON.parse('{"title":"一、基础使用","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/other/version/github/01.md","filePath":"markdown/other/version/github/01.md"}'),J={name:"markdown/other/version/github/01.md"};function O(z,s,K,M,Q,W){return t(),a("div",null,s[0]||(s[0]=[n('<h1 id="一、基础使用" tabindex="-1">一、基础使用 <a class="header-anchor" href="#一、基础使用" aria-label="Permalink to &quot;一、基础使用&quot;">​</a></h1><h2 id="_1-1-github注册" tabindex="-1">1.1 Github注册 <a class="header-anchor" href="#_1-1-github注册" aria-label="Permalink to &quot;1.1 Github注册&quot;">​</a></h2><ol><li>登入 <a href="https://github.com/" target="_blank" rel="noreferrer">GitHub</a> 的官网，点击 sign up（注册）； <img src="'+l+'" alt="" data-fancybox="gallery"></li><li>选择注册 <img src="'+h+'" alt="" data-fancybox="gallery"></li><li>填入相关的注册 GitHub 账号信息 <img src="'+p+'" alt="" data-fancybox="gallery"></li><li>登入自己刚刚注册的 Github 账号 <img src="'+e+'" alt="" data-fancybox="gallery"></li><li>登录成功 <img src="'+r+'" alt="" data-fancybox="gallery"></li></ol><h2 id="_1-2-github项目库创建" tabindex="-1">1.2 Github项目库创建 <a class="header-anchor" href="#_1-2-github项目库创建" aria-label="Permalink to &quot;1.2 Github项目库创建&quot;">​</a></h2><ol><li>登入自己的 Github后，点击创建 Create repository <img src="'+k+'" alt="" data-fancybox="gallery"></li><li>对创建的项目工程内容进行填写 <img src="'+o+'" alt="" data-fancybox="gallery"></li><li>查看仓库 <img src="'+g+'" alt="" data-fancybox="gallery"></li></ol><h2 id="_1-3-安装git" tabindex="-1">1.3 安装git <a class="header-anchor" href="#_1-3-安装git" aria-label="Permalink to &quot;1.3 安装git&quot;">​</a></h2><ol><li>安装成功后打开命令行 <img src="'+d+`" alt="" data-fancybox="gallery"></li><li>git基础命令</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 1. 初始化仓库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #：初始化一个新的Git仓库。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 2. 配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;你的名字&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #：设置用户名。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.email</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;你的邮箱&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   #：设置邮箱。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --list</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   #：列出所有配置。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 3. 克隆仓库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [URL] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#：克隆一个仓库到本地。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 4. 查看状态</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #：查看仓库的状态。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 5. 添加文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [文件名]    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#：添加文件到暂存区。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   #：添加当前目录下的所有文件到暂存区。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 6. 提交更改</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;提交信息&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #：提交暂存区到仓库。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -am</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;提交信息&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   #：跳过添加步骤，直接提交已跟踪文件。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 7. 查看历史记录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #：查看提交历史。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --oneline</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   #：以简洁的一行显示提交历史。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --graph</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #：以图表形式显示分支合并历史。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 8. 分支操作</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [分支名] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#：创建新分支。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [分支名]   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#：切换到指定分支。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [新分支名]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#：创建并切换到新分支。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [分支名]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#：删除分支。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [分支名]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#：合并指定分支到当前分支。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 9. 远程仓库操作</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [URL] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#：添加远程仓库。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [分支名] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#：将本地分支推送到远程仓库并设置跟踪关系。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #：推送本地更改到远程仓库。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #：从远程仓库拉取最新版本并合并。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fetch</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   #：从远程仓库拉取最新版本但不合并。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 10. 标签操作</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [标签名]：为当前提交打标签。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [标签名] -m </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;标签信息&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">：创建带注释的标签。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [标签名]：推送标签到远程仓库。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --tags：推送所有标签到远程仓库。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 11. 撤销操作</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [提交ID]   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#：重置当前HEAD到指定提交，丢弃所有更改。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [文件名]    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#：撤销工作目录中的更改（未添加到暂存区的）。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> revert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [提交ID] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#：撤销指定的提交，但保留更改的历史记录。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 12. 查看差异</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> diff</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #：比较工作目录和暂存区的差异。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> diff</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --cached</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   #：比较暂存区和HEAD的差异。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> diff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [分支名]   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#：比较工作目录和指定分支的差异。</span></span></code></pre></div><blockquote><p>注意：gitBash里面的命令与linux、unix保持一致; 选择目录时windows中的反斜杠<code>\\</code>改为斜杠<code>/</code></p></blockquote><h2 id="_1-4-git和github的绑定-ssh密钥" tabindex="-1">1.4 Git和Github的绑定(SSH密钥) <a class="header-anchor" href="#_1-4-git和github的绑定-ssh密钥" aria-label="Permalink to &quot;1.4 Git和Github的绑定(SSH密钥)&quot;">​</a></h2><h3 id="_1-4-1-得到ssh-keys" tabindex="-1">1.4.1 得到ssh keys <a class="header-anchor" href="#_1-4-1-得到ssh-keys" aria-label="Permalink to &quot;1.4.1 得到ssh keys&quot;">​</a></h3><p>输入 cd ~/.ssh，返回 &quot;no such file or directory&quot; 表明电脑没有ssh key，需要创建ssh key <img src="`+c+'" alt="" data-fancybox="gallery"></p><p>故在终端输入 <code>ssh-keygen -t rsa -C &quot;git账号&quot;</code> 连续进行 3 次回车Enter（确认），得到如下截图中的信息即可 <img src="'+F+'" alt="" data-fancybox="gallery"></p><p>按路径进入 .ssh，里面存储的是两个 ssh key 的秘钥，id_rsa.pub 文件里面存储的是公钥，id_rsa 文件里存储的是私钥，不能告诉别人。打开 id_rsa.pub 文件，复制里面的内容。 <img src="'+y+'" alt="" data-fancybox="gallery"></p><h3 id="_1-4-1-绑定ssh密钥" tabindex="-1">1.4.1 绑定ssh密钥 <a class="header-anchor" href="#_1-4-1-绑定ssh密钥" aria-label="Permalink to &quot;1.4.1 绑定ssh密钥&quot;">​</a></h3><ol><li><p>接下需要登录到自己的 GitHub 上边添加这个密匙 <img src="'+u+'" alt="" data-fancybox="gallery"><img src="'+b+'" alt="" data-fancybox="gallery"></p></li><li><p>填写名字并且填写复制的公钥（id_rsa.pub内容），点击按钮 <code>Add SSH key</code>,添加后配置完成。 <img src="'+m+'" alt="" data-fancybox="gallery"></p></li><li><p>绑定结果 <img src="'+E+'" alt="" data-fancybox="gallery"></p></li><li><p>我们回到 Git bash上边，输入：ssh -T <a href="mailto:git@github.com" target="_blank" rel="noreferrer">git@github.com</a> 来检查是否成功绑定。如果输入代码之后再选择 yes 出来是这样说明就成功啦！！！ <img src="'+C+'" alt="" data-fancybox="gallery"></p></li><li><p>剩余简单的配置内容。</p></li></ol><p>将 name 最好和 GitHub 上边的一样，email 是一定要是注册 GitHub 的那个邮箱地址</p><p>这两个的顺序可以颠倒，没有固定的顺序。</p><p><code>git config --global user.name &quot;gitname&quot;</code><code>git config --global user.email &quot;git邮箱&quot;</code></p><p><img src="'+_+'" alt="" data-fancybox="gallery"></p><p>止到这里的操作，已经完成本地 Git 与远程的 Github 绑定，这意味着我们已经可以通过 Git 向 GitHub 提交代码啦！</p><h2 id="_1-5-使用github-生成个人令牌" tabindex="-1">1.5 使用github 生成个人令牌 <a class="header-anchor" href="#_1-5-使用github-生成个人令牌" aria-label="Permalink to &quot;1.5 使用github 生成个人令牌&quot;">​</a></h2><p>‌GitHub Personal Access Token（个人访问令牌）是一种用于身份验证的安全凭据‌。它允许用户在进行API请求、访问私有仓库或执行其他需要身份验证的操作时，代替密码使用。</p><p>要生成GitHub Personal Access Token，你需要：</p><ol><li><p>‌登录GitHub账户‌：确保你已经注册并登录了你的GitHub账户‌。</p></li><li><p>进入个人设置‌：点击页面右上角的头像，选择“Settings”（设置），然后在左侧导航栏中点击底部的“Developer settings”（开发者设置）。</p></li><li><p>‌访问个人访问令牌页面‌：在“Developer settings”页面，选择“Personal access tokens”（个人访问令牌），并点击“Generate new token”（生成新令牌）按钮。</p></li><li><p>配置并生成令牌‌：在生成新令牌的界面，你需要输入令牌的名称、选择过期时间以及选择令牌所需的权限（如访问仓库的权限）。完成配置后，点击“Generate token”按钮生成令牌。</p></li></ol><blockquote><p>请注意，生成令牌后，你需要立即复制并保存它，因为离开页面后你将无法再次看到令牌‌</p></blockquote><p><img src="'+B+'" alt="" data-fancybox="gallery"><img src="'+A+'" alt="" data-fancybox="gallery"><img src="'+D+'" alt="" data-fancybox="gallery"><img src="'+f+'" alt="" data-fancybox="gallery"></p><h2 id="_1-6-使用git将代码提交到github" tabindex="-1">1.6 使用Git将代码提交到GitHub <a class="header-anchor" href="#_1-6-使用git将代码提交到github" aria-label="Permalink to &quot;1.6 使用Git将代码提交到GitHub&quot;">​</a></h2><h3 id="_1-6-1-克隆仓库" tabindex="-1">1.6.1 克隆仓库 <a class="header-anchor" href="#_1-6-1-克隆仓库" aria-label="Permalink to &quot;1.6.1 克隆仓库&quot;">​</a></h3><ol><li><p>将我们的库克隆下来到本地电脑中，方便以后进行上传代码。 <img src="'+v+'" alt="" data-fancybox="gallery"></p></li><li><p>点进仓库之后点击 Code，点击 ssh 会看到一串网址（http也可以），这个地址就是代码地址，git clone 命令会用的到。 <img src="'+x+'" alt="" data-fancybox="gallery"></p></li><li><p>接下来我们就开始选择文件存储地方了，在本地电脑中找到存储文件的地方，然后右键选择 Git Bash Here： <img src="'+q+'" alt="" data-fancybox="gallery"></p></li><li><p>在终端输入 git clone 地址（这个地址就是刚刚库那个Code的上代码地址） 该过程有时候可能会需要输入 Github 账号密码啥的，记得不要输错啦！ <img src="'+j+'" alt="" data-fancybox="gallery"></p></li></ol><h3 id="_1-6-2-上传代码" tabindex="-1">1.6.2 上传代码 <a class="header-anchor" href="#_1-6-2-上传代码" aria-label="Permalink to &quot;1.6.2 上传代码&quot;">​</a></h3><ol><li><p>打开这个文件夹，然后在其中创建一个任意格式，任意名称的文件（这里新建了一个测试文件）。 <img src="'+G+'" alt="" data-fancybox="gallery"></p></li><li><p>在这个文件夹里面右键 git bash 进黑框框，<code>git add</code> 我们新增的文件 <img src="'+P+'" alt="" data-fancybox="gallery"></p></li><li><p>之后输入然后 <code>git commit -m &quot;测试是否成功&quot;</code> 引号内的内容可以随意改动，这个语句的意思是 给你刚刚上传的文件一个备注，方便查找记忆而已； <img src="'+H+'" alt="" data-fancybox="gallery"></p></li><li><p>接着输入 push 指令 <code>git push origin main</code>，如下图所示就代表成功了； <img src="'+S+'" alt="" data-fancybox="gallery"></p></li><li><p>打开 GitHub，看到刚刚上传的文件，显示成功。 <img src="'+T+'" alt="" data-fancybox="gallery"></p></li></ol><h3 id="_1-6-3-推送与拉取" tabindex="-1">1.6.3 推送与拉取 <a class="header-anchor" href="#_1-6-3-推送与拉取" aria-label="Permalink to &quot;1.6.3 推送与拉取&quot;">​</a></h3><p><em>push</em>：该单词直译过来就是 【推】 的意思，如果我们本地的代码有了更新，为了保持本地与远程的代码同步，我们就需要把本地的代码推到远程的仓库，代码示例：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span></code></pre></div><p><em>pull</em>：该单词直译过来就是 【拉】的意思，如果我们远程仓库的代码有了更新，同样为了保持本地与远程的代码同步，我们就需要把远程的代码拉到本地，代码示例：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span></code></pre></div><p><code>git push origin</code> 命令用于将本地代码推送到远程仓库。具体来说，<code>git push</code>用于将本地提交的代码推送到一个远程分支上，<code>origin</code>是远程仓库的名称，通常为<code>origin</code>，它表示要将代码推送到哪个远程仓库。该命令的完整语法是：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">本地分支</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">远程分支</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>其中，<code>&lt;本地分支名&gt;</code>表示要推送的本地分支的名称，<code>&lt;远程分支名&gt;</code>表示要将代码推送到的远程分支的名称。如果两者名称相同，则可以省略<code>&lt;远程分支名&gt;</code>。</p><ol><li>远程仓库新建文件 <img src="'+w+'" alt="" data-fancybox="gallery"><img src="'+I+'" alt="" data-fancybox="gallery"><img src="'+$+'" alt="" data-fancybox="gallery"><img src="'+N+'" alt="" data-fancybox="gallery"></li><li>本地拉取文件 <img src="'+R+'" alt="" data-fancybox="gallery"></li><li>本地修改文件 <img src="'+V+'" alt="" data-fancybox="gallery"></li><li>本地推送文件 <img src="'+L+'" alt="" data-fancybox="gallery"></li><li>查看 <img src="'+U+'" alt="" data-fancybox="gallery"></li></ol>',41)]))}const Z=i(J,[["render",O]]);export{Y as __pageData,Z as default};
