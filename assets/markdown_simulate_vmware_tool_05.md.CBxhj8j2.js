import{_ as i,c as o,o as l,a0 as d}from"./chunks/framework.zS86-xgI.js";const m=JSON.parse('{"title":"vim编辑器","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/simulate/vmware/tool/05.md","filePath":"markdown/simulate/vmware/tool/05.md"}'),a={name:"markdown/simulate/vmware/tool/05.md"};function c(t,e,s,p,r,n){return l(),o("div",null,e[0]||(e[0]=[d(`<h1 id="vim编辑器" tabindex="-1">vim编辑器 <a class="header-anchor" href="#vim编辑器" aria-label="Permalink to &quot;vim编辑器&quot;">​</a></h1><h2 id="_1-vim的基本概念" tabindex="-1">1.vim的基本概念 <a class="header-anchor" href="#_1-vim的基本概念" aria-label="Permalink to &quot;1.vim的基本概念&quot;">​</a></h2><p>vim的三种模式(其实有好多模式，目前掌握这3种即可),分别是命令模式(command mode)、插入模式(Insert mode)和底行模式(last line mode)，各模式的功能区分如下:</p><ol><li><p>正常/普通/命令模式(Normal mode)</p><p>控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入Insert mode下，或者到 last line mode</p></li><li><p>插入模式(lnsert mode)。</p><p>只有在Insert mode下，才可以做文字输入，按<code>[ESC]</code>键可回到命令行模式。该模式是我们后面用的最频繁的编辑模式。</p></li><li><p>末行模式(last line mode).</p><p>文件保存或退出，也可以进行文件替换，找字符串，列出行号等操作。在命令模式下，shit+: 即可进入该模式。要查看你的所有模式:打开vim，底行模式直接输入:help vim-modes</p></li></ol><h2 id="_2-vim的基本操作" tabindex="-1">2.vim的基本操作 <a class="header-anchor" href="#_2-vim的基本操作" aria-label="Permalink to &quot;2.vim的基本操作&quot;">​</a></h2><p>进入vim,在系统提示符号输入vim及文件名称后，就进入vim全屏幕编辑画面:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.c</span></span></code></pre></div><p>不过有一点要特别注意，就是你进入vim之后，是处于【正常模式】，你要切换到【插入模式】才能够输入文字</p><h3 id="_2-1-【正常模式】切换至【插入模式】" tabindex="-1">2.1 【正常模式】切换至【插入模式】 <a class="header-anchor" href="#_2-1-【正常模式】切换至【插入模式】" aria-label="Permalink to &quot;2.1 【正常模式】切换至【插入模式】&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输入a</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输入i</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输入o</span></span></code></pre></div><h3 id="_2-2-【插入模式】切换至【正常模式】" tabindex="-1">2.2 【插入模式】切换至【正常模式】 <a class="header-anchor" href="#_2-2-【插入模式】切换至【正常模式】" aria-label="Permalink to &quot;2.2 【插入模式】切换至【正常模式】&quot;">​</a></h3><p>目前处于【插入模式】，就只能一直输入文字，如果发现输错了字,想用光标键往回移动，将该字删除， 可以先按一下 <code>[ESC]</code>键转到【正常模式】再删除文字。当然，也可以直接删除。</p><h3 id="_2-3-【正常模式】切换至【末行模式】" tabindex="-1">2.3 【正常模式】切换至【末行模式】 <a class="header-anchor" href="#_2-3-【正常模式】切换至【末行模式】" aria-label="Permalink to &quot;2.3 【正常模式】切换至【末行模式】&quot;">​</a></h3><p><code>[shift +;]</code>,其实就是输入<code>[:]</code></p><p>退出vim及保存文件,在【正常模式】下，按一下<code>[:]</code>冒号键进入 <code>[Last line mode]</code>,例如:</p><ul><li>:w(保存当前文件)</li><li>:wq(输入<code>[wq]</code>,存盘并退出vim)</li><li>:q!(输入q!,不存盘强制退出vim)</li></ul><h2 id="_3-vim正常模式命令集" tabindex="-1">3.vim正常模式命令集 <a class="header-anchor" href="#_3-vim正常模式命令集" aria-label="Permalink to &quot;3.vim正常模式命令集&quot;">​</a></h2><ol><li><p>插入模式</p><ul><li>按<code>[i]</code>切换进入插入模式<code>[insert mode]</code>，按“i“进入插入模式后是从光标当前位置开始输入文件;。</li><li>按<code>[a]</code>进入插入模式后，是从目前光标所在位置的下一个位置开始输入文字;。</li><li>按<code>[o]</code>进入插入模式后，是插入新的一行，从行首开始输入文字。</li></ul></li><li><p>从插入模式切换为命令模式</p><p>按 <code>[ESC]</code>键。</p></li><li><p>移动光标</p><p>vim可以直接用键盘上的光标来上下左右移动，但正规的vim是用小写英文字母 h j k l，分别控制光标左、下、上、右移一格</p><ul><li>按<code>[G]</code>:移动到文章的最后</li><li>按<code>[$]</code>:移动到光标所在行的“行尾’</li><li>按<code>[^]</code>:移动到光标所在行的“行首”</li><li>按<code>[w]</code>:光标跳到下个字的开头</li><li>按<code>[e]</code>:光标跳到下个字的字尾</li><li>按<code>[b]</code>:光标回到上个字的开头</li><li>按<code>[#]</code>:光标移到该行的第#个位置，如:5l,56</li><li>======================================</li><li>按<code>[gg]</code>:进入到文本开始</li><li>按<code>[shift+g]</code>:进入文本末端</li><li>按<code>[ctrl]</code>+<code>[b]</code>:屏幕往“后”移动一页</li><li>======================================</li><li>按<code>[ctrl]</code>+<code>[f]</code>:屏幕往“前”移动一页</li><li>按<code>[ctrl]</code>+<code>[u]</code>:屏幕往“后”移动半页</li><li>按<code>[ctrl]</code>+<code>[d]</code>:屏幕往“前”移动半页.</li></ul></li><li><p>删除文字</p><ul><li><code>[x]</code> : 每按一次，删除光标所在位置的一个字符</li><li><code>[#x]</code> : 例如，<code>[6x]</code>表示删除光标所在位置的“后面(包含自己在内)”6个字符</li><li><code>[X]</code> :大写的X，每按一次，删除光标所在位置的“前面”一个字符</li><li><code>[#X]</code> : 例如，<code>[20X]</code> 表示删除光标所在位置的“前面”20个字符</li><li><code>[dd]</code> :删除光标所在行 不是删除是剪切</li><li><code>[#dd]</code> :从光标所在行开始删除#行</li></ul></li><li><p>复制</p><ul><li><code>[yw]</code> :将光标所在之处到字尾的字符复制到缓冲区中。</li><li><code>[#yw]</code> : 复制#个字到缓冲区</li><li><code>[yy]</code> : 复制光标所在行到缓冲区,</li><li><code>[#yy]</code> : 例如，<code>[6yy]</code>表示拷贝从光标所在的该行“往下数”6行文字。</li><li><code>[p]</code> : 将缓冲区内的字符贴到光标所在位置。注意:所有与&quot;y&quot;有关的复制命令都必须与&quot;p”配合才能完成复制与粘贴功能。</li><li><code>[#p]</code> ：复制#行</li></ul></li><li><p>撤销上一次操作</p><p>一旦退出就不能再撤销，如果只是保存可预撤</p><ul><li><code>[u]</code> 如果您误执行一个命令，可以马上按下<code>[u]</code>，回到上一个操作。按多次“u”可以执行多次回复。</li><li><code>[ctrl+r]</code> :撤销的恢复</li></ul></li></ol><h2 id="_4-vim末行模式命令集" tabindex="-1">4.vim末行模式命令集 <a class="header-anchor" href="#_4-vim末行模式命令集" aria-label="Permalink to &quot;4.vim末行模式命令集&quot;">​</a></h2><p>在使用末行模式之前，请记住先按<code>[ESC]</code>键确定您已经处于正常模式，再按<code>[:]</code>冒号即可进入未行模式</p><p>列出行号</p><p><code>[set nu]</code> : 输入<code>[set nu]</code>后，会在文件中的每一行前面列出行号,</p><h3 id="_4-1-跳到文件中的某一行" tabindex="-1">4.1 跳到文件中的某一行 <a class="header-anchor" href="#_4-1-跳到文件中的某一行" aria-label="Permalink to &quot;4.1 跳到文件中的某一行&quot;">​</a></h3><p><code>[#]</code> : <code>[#]</code>号表示一个数字，在冒号后输入一个数字，再按回车键就会跳到该行了，如输入数字15，再回车，就会跳到文章的第15行。</p><h3 id="_4-2-查找字符" tabindex="-1">4.2 查找字符 <a class="header-anchor" href="#_4-2-查找字符" aria-label="Permalink to &quot;4.2 查找字符&quot;">​</a></h3><ul><li><code>[/关键字]</code> :先按<code>[/]</code> 键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按<code>[n]</code>会往后寻找到您要的关键字为止。正向搜索</li><li><code>[?关键字]</code> :先按<code>[?]</code>键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按<code>[n]</code>会往前寻找到您要的关键字为止。反向搜索</li></ul><h3 id="_4-3-保存文件" tabindex="-1">4.3 保存文件 <a class="header-anchor" href="#_4-3-保存文件" aria-label="Permalink to &quot;4.3 保存文件&quot;">​</a></h3><ul><li><code>[w]</code> :在冒号输入字母<code>[w]</code>就可以将文件保存起来 离开vim</li><li><code>[q]</code> :按<code>[q]</code>就是退出，如果无法离开vim，可以在<code>[q]</code>后跟一个<code>[!]</code>强制离开vim。</li><li><code>[wq]</code> :一般建议离开时，搭配<code>[w]</code>一起使用，这样在退出的时候还可以保存文件。</li></ul><h2 id="_5-简单vim配置" tabindex="-1">5.简单vim配置 <a class="header-anchor" href="#_5-简单vim配置" aria-label="Permalink to &quot;5.简单vim配置&quot;">​</a></h2><ol><li><p>配置文件的位置</p><p>在目录 /etc/ 下面，有个名为vimrc的文件，这是系统中公共的vim配置文件，对所有用户都有效。而在每个用户的主目录下，- - 都可以自己建立私有的配置文件，命名为:“vimrc&quot;。</p><p>例如，/root目录下通常已经存在一个.vimrc文件,如果不存在，则创建之。</p><p>切换用户成为自己执行 su ，进入自己的主工作目录,执行 cd ~</p><p>打开自己目录下的:vimrc文件，执行vim.vimrc</p></li><li><p>常用配置选项,用来测试</p><ul><li>设置语法高亮: syntax on</li><li>显示行号: set nu</li><li>设置缩进的空格数为4:set shiftwidth=4</li></ul></li></ol>`,30)]))}const u=i(a,[["render",c]]);export{m as __pageData,u as default};
