import{_ as a,c as n,o as e,a0 as s}from"./chunks/framework.zS86-xgI.js";const h=JSON.parse('{"title":"三、页面","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/other/document/vuepress/03.md","filePath":"markdown/other/document/vuepress/03.md"}'),d={name:"markdown/other/document/vuepress/03.md"};function r(p,t,o,i,l,c){return e(),n("div",null,t[0]||(t[0]=[s(`<h1 id="三、页面" tabindex="-1">三、页面 <a class="header-anchor" href="#三、页面" aria-label="Permalink to &quot;三、页面&quot;">​</a></h1><h2 id="_3-1-路由" tabindex="-1">3.1 路由 <a class="header-anchor" href="#_3-1-路由" aria-label="Permalink to &quot;3.1 路由&quot;">​</a></h2><p>默认情况下，页面的路由路径是根据你的 Markdown 文件的相对路径决定的。</p><p>假设这是你的 Markdown 文件所处的目录结构：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>└─ docs</span></span>
<span class="line"><span>   ├─ guide</span></span>
<span class="line"><span>   │  ├─ getting-started.md</span></span>
<span class="line"><span>   │  └─ README.md</span></span>
<span class="line"><span>   ├─ contributing.md</span></span>
<span class="line"><span>   └─ README.md</span></span></code></pre></div><p>将 docs 目录作为你的 sourceDir ，例如你在运行 vuepress dev docs 命令。此时，你的 Markdown 文件对应的路由路径为：</p><table tabindex="0"><thead><tr><th>相对路径</th><th>路由路径</th></tr></thead><tbody><tr><td>/README.md</td><td>/</td></tr><tr><td>/index.md</td><td>/</td></tr><tr><td>/contributing.md</td><td>/contributing.html</td></tr><tr><td>/guide/README.md</td><td>/guide/</td></tr><tr><td>/guide/getting-started.md</td><td>/guide/getting-started.html</td></tr></tbody></table><h2 id="_3-2-frontmatter" tabindex="-1">3.2 Frontmatter <a class="header-anchor" href="#_3-2-frontmatter" aria-label="Permalink to &quot;3.2 Frontmatter&quot;">​</a></h2><p>Markdown 文件可以包含一个 Frontmatter 。Frontmatter 必须在 Markdown 文件的顶部，并且被包裹在一对三短划线中间。下面是一个基本的示例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>---</span></span>
<span class="line"><span>lang: zh-CN</span></span>
<span class="line"><span>title: 页面的标题</span></span>
<span class="line"><span>description: 页面的描述</span></span>
<span class="line"><span>---</span></span></code></pre></div><p>你肯定注意到 Frontmatter 中的字段和配置文件中的站点配置十分类似。你可以通过 Frontmatter 来覆盖当前页面的 lang, title, description 等属性。因此，你可以把 Frontmatter 当作页面级作用域的配置。</p><blockquote><p>不建议使用Frontmatter 直接在通用配置里使用就可以，掺杂了太多vuePress的语法，在其他markdown平台上预览会出现问题</p></blockquote>`,12)]))}const u=a(d,[["render",r]]);export{h as __pageData,u as default};
